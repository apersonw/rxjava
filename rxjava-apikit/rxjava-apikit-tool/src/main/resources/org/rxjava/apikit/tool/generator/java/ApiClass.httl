<!--#set(ApiClassInfo classInfo)-->
<!--#set(JavaApiWrapper wrapper)-->
<!--#set(ApiMethodInfo method)-->
<!--#set(ApiInputClassInfo param)-->
<!--#set(ClassTypeInfo type)-->
package $!{wrapper.getFullDistPackage()};

import reactor.core.publisher.Mono;
import org.bson.types.ObjectId;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.Future;
import org.rxjava.apikit.client.InputParam;


import org.rxjava.apikit.client.*;

$!{wrapper.imports}

public class $!{wrapper.getDistClassName()} {
    private ClientAdapter clientAdapter;

    /**
    * 必须注入适配器
    */
    private $!{wrapper.getDistClassName()}() {
    }

    public $!{wrapper.getDistClassName()}(ClientAdapter clientAdapter) {
        this.clientAdapter = clientAdapter;
    }

    <!--#for(method : classInfo.apiMethodList)-->
    public Mono<$!{wrapper.resultData(method)}> $!{method.methodName}($!{wrapper.params(method)}) {
        Map<String, Object> pathParamMap = new HashMap<>();
        <!--#for(param : method.pathParams)-->
        pathParamMap.put("$!{param.getFieldName()}", $!{param.getFieldName()});
        <!--#end-->
        String requestUrl = ApiUtils.expandUriComponent("$!{method.url}", pathParamMap);

        Map<String, Object> requestPartParamMap = new HashMap<>();
        <!--#for(param : method.requestPartParams)-->
        requestPartParamMap.put("$!{param.getFieldName()}", $!{param.getFieldName()});
        <!--#end-->

        InputParam inputParam = new InputParam();

        List<Entry<String, Object>> _paramList = new ArrayList<>();
        <!--#for(param : method.requestParams)-->
        _paramList.add(new AbstractMap.SimpleImmutableEntry<>("$!{param.getFieldName()}", $!{param.getFieldName()}));
        <!--#end-->

        <!--#if(method.validParams)-->
        <!--#for(param : method.validParams)-->
        _paramList.addAll($!{param.fieldName}.encode("", new ArrayList<>()));
        <!--#end-->
        <!--#end-->

        inputParam.setParamList(_paramList);

        <!--#if(method.jsonParams)-->
        <!--#set(param = method.jsonParams[0])-->
        inputParam.setJsonBody($!{param.getFieldName()});
        <!--#end-->

        return clientAdapter.request("$!{method.type.name()}", requestUrl, inputParam, _$!{method.index}Type);
    }
    <!--#end-->

    <!--#for(method : classInfo.apiMethodList)-->
        $!{wrapper.resultTypeString(method,"    ")}
    <!--#end-->
}