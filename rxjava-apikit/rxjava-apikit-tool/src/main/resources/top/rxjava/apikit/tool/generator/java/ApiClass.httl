<!--#set(ApiClassInfo classInfo)-->
<!--#set(JavaApiWrapper wrapper)-->
<!--#set(ApiMethodInfo method)-->
<!--#set(ApiInputClassInfo param)-->
<!--#set(ClassTypeInfo type)-->
package $!{wrapper.getFullDistPackage()};

<!--#if(wrapper.context.reactive)-->import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;
<!--#end-->
import org.bson.types.ObjectId;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.Future;
import InputParam;
import top.rxjava.apikit.client.*;

$!{wrapper.imports}

public class $!{wrapper.getDistClassName()} {
    private <!--#if(!wrapper.context.reactive)-->Mvc<!--#end-->ClientAdapter clientAdapter;
    private String authorization;
    public void setAuthorization(String authorization){
        this.authorization=authorization;
    }

    /**
    * 必须注入适配器
    */
    private $!{wrapper.getDistClassName()}() {
    }

    public $!{wrapper.getDistClassName()}(<!--#if(!wrapper.context.reactive)-->Mvc<!--#end-->ClientAdapter clientAdapter) {
        this.clientAdapter = clientAdapter;
    }

    <!--#for(method : classInfo.apiMethodList)-->
    /**
    $!{wrapper.formatBaseComment(method.javaDocInfo,"     * ")}
    *
    $!{wrapper.requestComment(method,"     * ")}
    */
    public $!{wrapper.resultData(method)} $!{method.methodName}($!{wrapper.params(method)}) {
        String requestUrl = ApiUtils.expandUriComponent("$!{method.url}");

        InputParam inputParam = new InputParam();

        <!--#for(param : method.params)-->
            <!--#if(param.validParam && !param.jsonParam)-->
        inputParam.addForm($!{param.fieldName});
            <!--#end-->
            <!--#if(param.requestParam)-->
        inputParam.addRequestParam("$!{param.fieldName}",$!{param.fieldName});
            <!--#end-->
        <!--#end-->

        <!--#if(method.login)-->
        inputParam.setAuthorization(authorization);
        <!--#end-->

        <!--#if(method.jsonParams.size() > 0)-->
        <!--#set(param = method.jsonParams[0])-->
        inputParam.setJsonBody($!{param.getFieldName()});
        <!--#end-->

        <!--#if(method.isFlux)-->
        Mono<$!{wrapper.toResultDataType(method)}> $result = clientAdapter.request("$!{method.type.name()}", requestUrl, inputParam, _$!{method.index}Type);
        return $result.flatMapIterable(r->r);
        <!--#else-->
        return clientAdapter.request("$!{method.type.name()}", requestUrl, inputParam, _$!{method.index}Type);
        <!--#end-->
    }
    <!--#end-->

    <!--#for(method : classInfo.apiMethodList)-->
        $!{wrapper.resultTypeString(method,"    ")}
    <!--#end-->
}